{"version":3,"sources":["store/index.ts","store/constants.ts","components/TodoCard.tsx","components/Buttons.tsx","components/TodoList.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["initialState","todos","isLoading","isLoaded","sortType","isReverse","setTodos","type","reverseTodos","status","getloading","state","getloaded","getTodos","getSortType","getReverseStatus","store","createStore","action","filter","todo","id","composeWithDevTools","TodoCard","dispatch","useDispatch","className","user","name","onClick","title","completed","controlButtonConfig","Button","useSelector","map","button","key","setSortType","SORT_BY_OPTIONS","TodoList","sortedTodos","useMemo","reverse","Number","sort","a","b","localeCompare","getAllTodos","url","fetch","then","response","json","getPreparedData","Promise","all","todosFromServer","usersFromServer","todosWithUsers","find","userId","App","loading","loaded","loadData","data","finally","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80b8f2af.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  SET_TODOS, REMOVE_TODO, SET_LOADED, SET_LOADING, SET_SORT_TYPE, REVERSE,\n} from './constants';\n\nconst initialState: RootState = {\n  todos: [],\n  isLoading: false,\n  isLoaded: false,\n  sortType: '',\n  isReverse: false,\n};\n\n// Action creators - a function returning an action object\n// export const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\nexport const setTodos = (todos: Todo[]) => ({ type: SET_TODOS, todos });\nexport const deleteTodo = (id: number) => ({ type: REMOVE_TODO, id });\nexport const isLoading = () => ({ type: SET_LOADING });\nexport const isLoaded = () => ({ type: SET_LOADED });\nexport const setSortType = (sortType: string) => ({ type: SET_SORT_TYPE, sortType });\nexport const reverseTodos = (status: boolean) => ({ type: REVERSE, status });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getloading = (state: RootState) => state.isLoading;\nexport const getloaded = (state: RootState) => state.isLoaded;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortType = (state: RootState) => state.sortType;\nexport const getReverseStatus = (state: RootState) => state.isReverse;\n\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return { ...state, isLoading: true };\n\n    case SET_LOADED:\n      return { ...state, isLoaded: true };\n\n    case SET_TODOS:\n      return { ...state, todos: action.todos };\n\n    case SET_SORT_TYPE:\n      return { ...state, sortType: action.sortType };\n\n    case REVERSE:\n      return { ...state, isReverse: action.status };\n\n    case REMOVE_TODO:\n      return { ...state, todos: state.todos.filter(todo => todo.id !== action.id) };\n\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","export const SET_TODOS = 'SET_TODOS';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_LOADED = 'SET_LOADED';\nexport const SET_SORT_TYPE = 'SET_SORT_TYPE';\nexport const REVERSE = 'REVERSE';\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo } from '../store';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <h5 className=\"todo__user\">{todo.user ? todo.user.name : 'Unknown'}</h5>\n      <button\n        className=\"remove-button\"\n        onClick={() => dispatch(deleteTodo(todo.id))}\n      >\n        delete\n      </button>\n      <span>{todo.title}</span>\n      <i className=\"secondary-content\">\n        {todo.completed\n          ? <i className=\"material-icons\">Completed</i>\n          : <i className=\"material-icons color-red\">In Process</i>}\n      </i>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getReverseStatus,\n  getSortType,\n  reverseTodos,\n  setSortType,\n} from '../store';\n\nexport const controlButtonConfig = [\n  {\n    name: 'Sort by name',\n    sortType: 'userName',\n  },\n  {\n    name: 'Sort by title',\n    sortType: 'title',\n  },\n  {\n    name: 'Sort by status',\n    sortType: 'completed',\n  },\n];\n\nexport const Button = () => {\n  const dispatch = useDispatch();\n  const sortType = useSelector(getSortType);\n  const isReverse = useSelector(getReverseStatus);\n\n  const changeSortType = (type: string) => {\n    if (!type) {\n      return;\n    }\n\n    if (type === sortType) {\n      dispatch(reverseTodos(!isReverse));\n    } else {\n      dispatch(reverseTodos(false));\n      dispatch(setSortType(type));\n    }\n  };\n\n  return (\n    <ul className=\"button__list\">\n      {controlButtonConfig.map(button => (\n        <li className=\"item\" key={button.name}>\n          <button\n            type=\"button\"\n            className=\"button waves-effect waves-light btn mgb20\"\n            onClick={() => changeSortType(button.sortType)}\n          >\n            {button.name}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TodoCard } from './TodoCard';\n\nimport { getTodos, getSortType, getReverseStatus } from '../store';\nimport { Button } from './Buttons';\n\nconst SORT_BY_OPTIONS = {\n  title: 'title',\n  completed: 'completed',\n  userName: 'userName',\n};\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = () => {\n  const todos: Todo[] = useSelector(getTodos);\n  const sortType = useSelector(getSortType);\n  const isReverse = useSelector(getReverseStatus);\n\n  const sortedTodos = useMemo(() => {\n    const reverse = Number(isReverse) ? -1 : 1;\n\n    switch (sortType) {\n      case SORT_BY_OPTIONS.title:\n        return [...todos]\n          .sort((a, b) => (a.title).localeCompare(b.title) * reverse);\n\n      case SORT_BY_OPTIONS.completed:\n        return [...todos]\n          .sort((a, b) => (Number(b.completed) - Number(a.completed)) * reverse);\n\n      case SORT_BY_OPTIONS.userName:\n        return [...todos]\n          .sort((a, b) => ((a.user.name).localeCompare(b.user.name)) * reverse);\n\n      default:\n        return todos;\n    }\n  }, [sortType, todos, isReverse]);\n\n  return (\n    <>\n      <Button />\n      <ul className=\"todo-list\">\n        {sortedTodos.map(todo => (\n          <li key={todo.id} className=\"todo-list__item\">\n            <TodoCard todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getAllTodos = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAllTodos<User>('/users.json');\nexport const getTodos = () => getAllTodos<Todo>('/todos.json');\n\nexport const getPreparedData = async () => {\n  const [todosFromServer, usersFromServer] = await Promise.all(\n    [getTodos(), getUsers()],\n  );\n\n  const todosWithUsers = todosFromServer.map((todo) => ({\n    ...todo,\n    user: usersFromServer.find((user) => user.id === todo.userId),\n  }));\n\n  return todosWithUsers;\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { getPreparedData } from './helpers/api';\nimport {\n  isLoaded,\n  isLoading,\n  setTodos,\n  getloading,\n  getloaded,\n  getTodos,\n} from './store';\n\nconst App = () => {\n  // const message = useSelector(getMessage) || 'Ready!';\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const loading = useSelector(getloading);\n  const loaded = useSelector(getloaded);\n\n  const loadData = async () => {\n    dispatch(isLoading());\n\n    getPreparedData()\n      .then(data => {\n        dispatch(setTodos(data as Todo[]));\n        dispatch(isLoaded());\n      })\n      .finally(() => dispatch(isLoading()));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <h1>Redux list of todos</h1>\n        {!loaded\n        && (\n          <button\n            type=\"button\"\n            disabled={loading}\n            className=\"button waves-effect waves-light btn mgb20\"\n            onClick={loadData}\n          >\n            {loading ? 'Loading...' : 'load todos'}\n          </button>\n        )}\n        {loaded && (\n          <TodoList todos={todos} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}