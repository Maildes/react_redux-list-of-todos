{"version":3,"sources":["store/index.ts","store/constants.ts","components/TodoCard.tsx","components/Buttons.tsx","components/TodoList.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["initialState","todos","isLoading","isLoaded","sortType","isReverse","setTodos","type","reverseTodos","status","getloading","state","getloaded","getTodos","getSortType","getReverseStatus","store","createStore","action","filter","todo","id","composeWithDevTools","TodoCard","className","user","name","title","completed","controlButtonConfig","Button","dispatch","useDispatch","useSelector","map","button","key","href","onClick","setSortType","SORT_BY_OPTIONS","TodoList","sortedTodos","useMemo","sort","a","b","localeCompare","Number","getAllTodos","url","fetch","then","response","json","getPreparedData","Promise","all","todosFromServer","usersFromServer","todosWithUsers","find","userId","App","loading","loaded","loadData","data","console","log","finally","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa1a8b8d.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n  SET_TODOS, REMOVE_TODO, SET_LOADED, SET_LOADING, SET_SORT_TYPE, REVERSE,\n} from './constants';\n\n// Action types - is just a constant. MUST have a unique value.\n// const START_LOADING = 'START_LOADING';\n// const FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators - a function returning an action object\n// export const startLoading = () => ({ type: START_LOADING });\n// export const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\nconst initialState: RootState = {\n  todos: [],\n  isLoading: false,\n  isLoaded: false,\n  sortType: '',\n  isReverse: false,\n};\n\n// Selectors - a function receiving Redux state and returning some data from it\n// export const isLoading = (state: RootState) => state.loading;\n// export const getMessage = (state: RootState) => state.message;\nexport const setTodos = (todos: Todo[]) => ({ type: SET_TODOS, todos });\nexport const deleteTodo = (id: number) => ({ type: REMOVE_TODO, id });\nexport const isLoading = () => ({ type: SET_LOADING });\nexport const isLoaded = () => ({ type: SET_LOADED });\nexport const setSortType = (sortType: string) => ({ type: SET_SORT_TYPE, sortType });\nexport const reverseTodos = (status: boolean) => ({ type: REVERSE, status });\n\n\nexport const getloading = (state: RootState) => state.isLoading;\nexport const getloaded = (state: RootState) => state.isLoaded;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortType = (state: RootState) => state.sortType;\nexport const getReverseStatus = (state: RootState) => state.isReverse;\n\n// const initialState: RootState = {\n//   loading: false,\n//   message: '',\n// };\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return { ...state, isLoading: true };\n\n    case SET_LOADED:\n      return { ...state, isLoaded: true };\n\n    case SET_TODOS:\n      return { ...state, todos: action.todos };\n\n    case SET_SORT_TYPE:\n      return { ...state, sortType: action.sortType };\n\n    case REVERSE:\n      return { ...state, isReverse: action.status };\n\n\n    case REMOVE_TODO:\n      return { ...state, todos: state.todos.filter(todo => todo.id !== action.id) };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","export const SET_TODOS = 'SET_TODOS';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_LOADED = 'SET_LOADED';\nexport const SET_SORT_TYPE = 'SET_SORT_TYPE';\nexport const REVERSE = 'REVERSE';\n","import React from 'react';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <>\n    <h5 className=\"todo__user\">{todo.user ? todo.user.name : 'Unknown'}</h5>\n    <span>{todo.title}</span>\n    <i className=\"secondary-content\">\n      {todo.completed\n        ? <i className=\"material-icons\">Completed</i>\n        : <i className=\"material-icons color-red\">In Process</i>}\n    </i>\n  </>\n);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getReverseStatus, getSortType, reverseTodos, setSortType } from '../store';\n\nexport const controlButtonConfig = [\n  {\n    name: 'Sort by name',\n    sortType: 'userName',\n  },\n  {\n    name: 'Sort by title',\n    sortType: 'title',\n  },\n  {\n    name: 'Sort by status',\n    sortType: 'completed',\n  },\n];\n\nexport const Button = () => {\n  const dispatch = useDispatch();\n  const sortType = useSelector(getSortType);\n  const isReverse = useSelector(getReverseStatus);\n\n  const changeSortType = (type: string) => {\n    if (!type) {\n      return;\n    }\n\n    if (type === sortType) {\n      dispatch(reverseTodos(!isReverse));\n    } else {\n      dispatch(setSortType(type));\n      dispatch(reverseTodos(false));\n    }\n  };\n\n  return (\n    <ul className=\"button__list\">\n      {controlButtonConfig.map(button => (\n        <li className=\"item\" key={button.name}>\n          <a\n            href=\"#\"\n            className=\"link\"\n            onClick={() => changeSortType(button.sortType)}\n          >\n            {button.name}\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TodoCard } from './TodoCard';\n\nimport { getTodos, getSortType } from '../store';\nimport { Button } from \"./Buttons\";\n\nconst SORT_BY_OPTIONS = {\n  title: 'title',\n  completed: 'completed',\n  userName: 'userName',\n};\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = () => {\n  const todos: Todo[] = useSelector(getTodos);\n  const sortType = useSelector(getSortType);\n\n  const sortedTodos = useMemo(() => {\n    switch (sortType) {\n      case SORT_BY_OPTIONS.title:\n        return [...todos]\n          .sort((a, b) => (a.title).localeCompare(b.title));\n\n      case SORT_BY_OPTIONS.completed:\n        return [...todos]\n          .sort((a, b) => (Number(b.completed) - Number(a.completed)));\n\n      case SORT_BY_OPTIONS.userName:\n        return [...todos]\n          .sort((a, b) => ((a.user.name).localeCompare(b.user.name)));\n\n      default:\n        return todos;\n    }\n  }, [sortType, todos]);\n\n  return (\n    <>\n      <Button />\n      <ul className=\"todo-list\">\n        {sortedTodos.map(todo => (\n          <li key={todo.id} className=\"todo-list__item\">\n            <TodoCard todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getAllTodos = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAllTodos<User>('/users.json');\nexport const getTodos = () => getAllTodos<Todo>('/todos.json');\n\nexport const getPreparedData = async () => {\n  const [todosFromServer, usersFromServer] = await Promise.all(\n    [getTodos(), getUsers()],\n  );\n\n  const todosWithUsers = todosFromServer.map((todo) => ({\n    ...todo,\n    user: usersFromServer.find((user) => user.id === todo.userId),\n  }));\n\n  return todosWithUsers;\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { TodoList } from \"./components/TodoList\";\nimport { getPreparedData } from \"./helpers/api\";\nimport { isLoaded, isLoading, setTodos, getloading, getloaded, getTodos } from \"./store\";\n\n// import { isLoading, getMessage } from './store';\n\n\nconst App = () => {\n  // const loading = useSelector(isLoading);\n  // const message = useSelector(getMessage) || 'Ready!';\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const loading = useSelector(getloading);\n  const loaded = useSelector(getloaded);\n\n  const loadData = async () => {\n    dispatch(isLoading());\n\n    getPreparedData()\n      .then(data => {\n        dispatch(setTodos(data as Todo[]));\n        console.log('ff');\n        dispatch(isLoaded());\n      })\n      .finally(() => dispatch(isLoading()));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {!loaded\n      && (\n        <button\n          type=\"button\"\n          disabled={loading}\n          className=\"button waves-effect waves-light btn mgb20\"\n          onClick={loadData}\n        >\n          {loading ? 'Loading...' : 'load todos'}\n        </button>\n      )}\n      {loaded && (\n        <TodoList todos={todos} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}